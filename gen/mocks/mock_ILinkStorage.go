// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	filestorage "short_url/internal/repository/filestorage"

	mock "github.com/stretchr/testify/mock"
)

// MockILinkStorage is an autogenerated mock type for the ILinkStorage type
type MockILinkStorage struct {
	mock.Mock
}

type MockILinkStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockILinkStorage) EXPECT() *MockILinkStorage_Expecter {
	return &MockILinkStorage_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockILinkStorage) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockILinkStorage_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockILinkStorage_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockILinkStorage_Expecter) Close() *MockILinkStorage_Close_Call {
	return &MockILinkStorage_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockILinkStorage_Close_Call) Run(run func()) *MockILinkStorage_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockILinkStorage_Close_Call) Return(_a0 error) *MockILinkStorage_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockILinkStorage_Close_Call) RunAndReturn(run func() error) *MockILinkStorage_Close_Call {
	_c.Call.Return(run)
	return _c
}

// FindLastID provides a mock function with given fields:
func (_m *MockILinkStorage) FindLastID() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindLastID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockILinkStorage_FindLastID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindLastID'
type MockILinkStorage_FindLastID_Call struct {
	*mock.Call
}

// FindLastID is a helper method to define mock.On call
func (_e *MockILinkStorage_Expecter) FindLastID() *MockILinkStorage_FindLastID_Call {
	return &MockILinkStorage_FindLastID_Call{Call: _e.mock.On("FindLastID")}
}

func (_c *MockILinkStorage_FindLastID_Call) Run(run func()) *MockILinkStorage_FindLastID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockILinkStorage_FindLastID_Call) Return(_a0 int, _a1 error) *MockILinkStorage_FindLastID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockILinkStorage_FindLastID_Call) RunAndReturn(run func() (int, error)) *MockILinkStorage_FindLastID_Call {
	_c.Call.Return(run)
	return _c
}

// FindLinkByID provides a mock function with given fields: id
func (_m *MockILinkStorage) FindLinkByID(id int) (string, bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindLinkByID")
	}

	var r0 string
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(int) (string, bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockILinkStorage_FindLinkByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindLinkByID'
type MockILinkStorage_FindLinkByID_Call struct {
	*mock.Call
}

// FindLinkByID is a helper method to define mock.On call
//   - id int
func (_e *MockILinkStorage_Expecter) FindLinkByID(id interface{}) *MockILinkStorage_FindLinkByID_Call {
	return &MockILinkStorage_FindLinkByID_Call{Call: _e.mock.On("FindLinkByID", id)}
}

func (_c *MockILinkStorage_FindLinkByID_Call) Run(run func(id int)) *MockILinkStorage_FindLinkByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockILinkStorage_FindLinkByID_Call) Return(_a0 string, _a1 bool, _a2 error) *MockILinkStorage_FindLinkByID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockILinkStorage_FindLinkByID_Call) RunAndReturn(run func(int) (string, bool, error)) *MockILinkStorage_FindLinkByID_Call {
	_c.Call.Return(run)
	return _c
}

// WriteData provides a mock function with given fields: ld
func (_m *MockILinkStorage) WriteData(ld *filestorage.LinkData) error {
	ret := _m.Called(ld)

	if len(ret) == 0 {
		panic("no return value specified for WriteData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*filestorage.LinkData) error); ok {
		r0 = rf(ld)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockILinkStorage_WriteData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteData'
type MockILinkStorage_WriteData_Call struct {
	*mock.Call
}

// WriteData is a helper method to define mock.On call
//   - ld *filestorage.LinkData
func (_e *MockILinkStorage_Expecter) WriteData(ld interface{}) *MockILinkStorage_WriteData_Call {
	return &MockILinkStorage_WriteData_Call{Call: _e.mock.On("WriteData", ld)}
}

func (_c *MockILinkStorage_WriteData_Call) Run(run func(ld *filestorage.LinkData)) *MockILinkStorage_WriteData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*filestorage.LinkData))
	})
	return _c
}

func (_c *MockILinkStorage_WriteData_Call) Return(_a0 error) *MockILinkStorage_WriteData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockILinkStorage_WriteData_Call) RunAndReturn(run func(*filestorage.LinkData) error) *MockILinkStorage_WriteData_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockILinkStorage creates a new instance of MockILinkStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockILinkStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockILinkStorage {
	mock := &MockILinkStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
