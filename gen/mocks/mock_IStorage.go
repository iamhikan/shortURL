// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockIStorage is an autogenerated mock type for the IStorage type
type MockIStorage struct {
	mock.Mock
}

type MockIStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIStorage) EXPECT() *MockIStorage_Expecter {
	return &MockIStorage_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: id
func (_m *MockIStorage) Get(id int) (string, bool) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(int) (string, bool)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockIStorage_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockIStorage_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id int
func (_e *MockIStorage_Expecter) Get(id interface{}) *MockIStorage_Get_Call {
	return &MockIStorage_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *MockIStorage_Get_Call) Run(run func(id int)) *MockIStorage_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockIStorage_Get_Call) Return(_a0 string, _a1 bool) *MockIStorage_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIStorage_Get_Call) RunAndReturn(run func(int) (string, bool)) *MockIStorage_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: link
func (_m *MockIStorage) Set(link string) int {
	ret := _m.Called(link)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(link)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockIStorage_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockIStorage_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - link string
func (_e *MockIStorage_Expecter) Set(link interface{}) *MockIStorage_Set_Call {
	return &MockIStorage_Set_Call{Call: _e.mock.On("Set", link)}
}

func (_c *MockIStorage_Set_Call) Run(run func(link string)) *MockIStorage_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIStorage_Set_Call) Return(_a0 int) *MockIStorage_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIStorage_Set_Call) RunAndReturn(run func(string) int) *MockIStorage_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIStorage creates a new instance of MockIStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIStorage {
	mock := &MockIStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
